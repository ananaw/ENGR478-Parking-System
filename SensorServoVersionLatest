//***********************************************************
// Hardware PWM proof of concept using
// the Tiva C Launchpad
//
// If sensors detect object, on/off red. If object leaving, on/off blue.
// For disabled, turn on green LED if car is there, else turn green off.
//
// If this way works, try it without timers outputting pulse trigger pulse, just the flags. 
//
// This drives servo motors 90 degrees to left on PWM PB6, PB7 when 
// ultrasonic sensor senses object around 4.5cm away.
//***********************************************************

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>		//
#include <string.h>
#include "inc/hw_gpio.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "inc/hw_timer.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/gpio.h"  
#include "driverlib/pwm.h"
#include "driverlib/uart.h"
#include "driverlib/timer.h"					// manually added
#include "driverlib/interrupt.h" 			// manually added
#include "inc/tm4c123gh6pm.h"					// manually added
//***********************************************************
volatile bool trigok0 = 1;			// sensor 1
volatile bool trigok1 = 1;			// sensor 2
volatile bool trigok2 = 1;			// sensor 3
volatile bool trigok3 = 1;			// sensor 4
volatile bool trigok4 = 1;			// sensor 5
volatile uint32_t cars_count = 0;
volatile uint32_t Disabled_count = 0;
volatile uint32_t prev_count;
volatile bool object1 = 0;			// flag to see if object present or not
volatile bool object2 = 0;
volatile bool object3 = 0;
volatile float duration0;
volatile float distance0;
volatile float duration1;
volatile float distance1;
volatile float duration2;
volatile float distance2;
volatile float duration3;
volatile float distance3;
volatile float duration4;
volatile float distance4;

void PortFunctionInit(void)
{
	// Enable clock for Port F peripheral
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);
	// Enable pin PF3 for GPIOOutput (green) Trig
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2);
	// Enable pin PF2 for GPIOInput (blue) Echo
	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4);
	//Enable pull-up on PF4 
	//GPIO_PORTF_PUR_R |= 0x10; 
	
	// Enable clock for Port D peripheral
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
	// Enable pin PD0,2,6 for GPIOOutput Trig
	GPIOPinTypeGPIOOutput(GPIO_PORTD_BASE, GPIO_PIN_0|GPIO_PIN_2);
	// Enable pin PD1,3,7 for GPIOInput  Echo
	GPIOPinTypeGPIOInput(GPIO_PORTD_BASE, GPIO_PIN_1|GPIO_PIN_3);
	// Set output 2mA current strength, push-pull pin *STD, and weak pull down *WPD.
	GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_1|GPIO_PIN_3, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
	
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOB);            		// enable GPIO port B
	GPIOPinConfigure(GPIO_PB6_T0CCP0);					// enable timer0A mode
	GPIOPinConfigure(GPIO_PB7_T0CCP1);					// enable timer0B mode
	GPIOPinConfigure(GPIO_PB4_T1CCP0);					// enable timer1A mode
	GPIOPinConfigure(GPIO_PB5_T1CCP1);					// enable timer1B mode
	GPIOPinConfigure(GPIO_PB0_T2CCP0);					// enable timer2A mode
	GPIOPinConfigure(GPIO_PB1_T2CCP1);					// enable timer2B mode
	GPIOPinConfigure(GPIO_PB2_T3CCP0);					// enable timer3A mode
	GPIOPinConfigure(GPIO_PB3_T3CCP1);					// enable timer3B mode
	GPIOPinTypeTimer(GPIO_PORTB_BASE, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);		// configure the GPIO pins for timer
	
//	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOC);            		// enable GPIO port C
//	GPIOPinConfigure(GPIO_PC0_T4CCP0);					// enable timer4A mode
//	GPIOPinConfigure(GPIO_PC1_T4CCP1);					// enable timer4B mode
//	GPIOPinTypeTimer(GPIO_PORTC_BASE, GPIO_PIN_0|GPIO_PIN_1);		// configure the GPIO pins for timer
	
	// Enable peripheral clocks for UART0 
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
  SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	
	// Enable pin PA2,4,6 for Output (Trig)
	GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6);
	// Enable pin PA3,5,7 for Input	 (Echo)
	GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7);
	GPIOPadConfigSet(GPIO_PORTA_BASE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
	//
  // Enable pin PA0 & PA1 for UART0 U0RX
  //
  GPIOPinConfigure(GPIO_PA0_U0RX);
  GPIOPinConfigure(GPIO_PA1_U0TX);
  GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	
	// Configure UART 115200 baud rate, clk freq, 8 bit word leng, 1 stop bit, & no parity.
	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
	
	//UART1_IBRD_R = 27;     // IBRD = int(50,000,000/(16*115,200)) = int(27.12674)
	//UART1_FBRD_R = 8;     // FBRD = round(0.12674 * 64) = 8
	//UART1_LCRH_R = 0x00000060;  // 8 bit, no parity bits, one stop, no FIFOs
	
	// Disable FIFO (First In First Out) registers. 
	//UARTFIFODisable(UART0_BASE);
}

void
ConfigurePWM(uint32_t period, uint32_t duty)
{
    //Configure PWM Clock divide system clock by 32
    SysCtlPWMClockSet(SYSCTL_PWMDIV_32);

    // Enable E peripheral used by this program.
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);  //Tiva Launchpad has two modules (0 and 1). Module 0 covers the E peripheral
	
    //Configure PE4,PE5 Pins as PWM
    GPIOPinConfigure(GPIO_PE4_M0PWM4);
    GPIOPinConfigure(GPIO_PE5_M0PWM5);
    GPIOPinTypePWM(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_5);

    //Configure PWM Options
    //PWM_GEN_2 Covers M0PWM4 and M0PWM5 for PE4,5, with count down mode, no comparator update synchronization mode
    PWMGenConfigure(PWM0_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN|PWM_GEN_MODE_NO_SYNC); 

    //Set the Period (expressed in clock ticks)
    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_2, period);

    //Set PWM duty for M0PWM4 and M0PWM5
    PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, duty);
    PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, duty);

    // Enable the PWM generator
    PWMGenEnable(PWM0_BASE, PWM_GEN_2);

		// Enable PWM Output pins 4 & 5: M0PWM4 and M0PWM5
    PWMOutputState(PWM0_BASE, PWM_OUT_4_BIT|PWM_OUT_5_BIT, true);		
}

void Timers_Init()		//unsigned long reload
{
	//Timer 0A interrupt, 0B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);			// enable peripheral clock for Timer0A
	TimerDisable(TIMER0_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER0_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_A_PERIODIC|TIMER_CFG_B_PERIODIC_UP);	// configure for periodic mode
	//TimerLoadSet(TIMER0_BASE, TIMER_A, reload-1);			// reload value of 60ms
	IntPrioritySet(INT_TIMER0A, 0x20);								// Set priority as 1
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	IntEnable(INT_TIMER0A);														// Enable interrupt 35 in NVIC
	TimerEnable(TIMER0_BASE, TIMER_B);
	TimerControlEvent(TIMER0_BASE, TIMER_B, TIMER_EVENT_BOTH_EDGES);
	
	// Timer 1A interrupt,1B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);			// enable peripheral clock for Timer1A
	//TimerClockSourceSet(TIMER0_BASE, TIMER_CLOCK_SYSTEM);
	TimerDisable(TIMER1_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER1_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_A_PERIODIC|TIMER_CFG_B_PERIODIC_UP);	// configure for periodic mode
	IntPrioritySet(INT_TIMER1A, 0x20);								// Set priority as 1
	TimerIntEnable(TIMER1_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	IntEnable(INT_TIMER1A);														// Enable interrupt  
	TimerEnable(TIMER1_BASE, TIMER_B);								// Enable Timer1B
	TimerControlEvent(TIMER1_BASE, TIMER_B, TIMER_EVENT_BOTH_EDGES);

	// Timer 2A interrupt,2B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);			// enable peripheral clock for Timer2A
	TimerDisable(TIMER2_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER2_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_A_PERIODIC|TIMER_CFG_B_PERIODIC_UP);	// configure for periodic mode
	IntPrioritySet(INT_TIMER2A, 0x20);								// Set priority as 1
	TimerIntEnable(TIMER2_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	IntEnable(INT_TIMER2A);														// Enable interrupt 
	TimerEnable(TIMER2_BASE, TIMER_B);								// Enable Timer2B
	
	// Timer 3A interrupt,3B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER3);			// enable peripheral clock for Timer3A
	TimerDisable(TIMER3_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER3_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_A_PERIODIC|TIMER_CFG_B_PERIODIC_UP);	// configure for periodic mode
	IntPrioritySet(INT_TIMER3A, 0x20);								// Set priority as 1
	TimerIntEnable(TIMER3_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	IntEnable(INT_TIMER3A);														// Enable interrupt 
	TimerEnable(TIMER3_BASE, TIMER_B);								// Enable Timer3B

	// Timer 4A interrupt,4B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER4);			// enable peripheral clock for Timer2A
	TimerDisable(TIMER4_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER4_BASE, TIMER_CFG_SPLIT_PAIR|TIMER_CFG_A_PERIODIC|TIMER_CFG_B_PERIODIC_UP);	// configure for periodic mode
	IntPrioritySet(INT_TIMER4A, 0x20);								// Set priority as 1
	TimerIntEnable(TIMER4_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	IntEnable(INT_TIMER4A);														// Enable interrupt 
	TimerEnable(TIMER4_BASE, TIMER_B);								// Enable Timer4B
}

void InterruptF_Init(void)
{
	IntEnable(INT_GPIOF);								                          // Enable interrupt 30 in NVIC, Code: NVIC_EN0_R |= 0x40000000;
	IntPrioritySet(INT_GPIOF, 0x00);		                          // Set interrupt priority 0 bits 23-21:010, Code: NVIC_PRI7_R &= ~0x00E00000
	GPIOIntEnable(GPIO_PORTF_BASE, GPIO_INT_PIN_1|GPIO_INT_PIN_2|GPIO_PIN_3);		//GPIO_PORTF_IM_R |= 0x04; arm interrupt on PF2 (Echo)
	GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2, GPIO_RISING_EDGE);
	GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_BOTH_EDGES);
	//GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_FALLING_EDGE);
	                                                              //GPIO_PORTF_IS_R &= ~0x04;	PF2 are edge sensitive
	                                                              //GPIO_PORTF_IBE_R &= ~0x04;  PF2 not both edge triggered, depends on IEV register
	                                                              //GPIO_PORTF_IEV_R |= 0x04;PF2 are rising-edged event
}

void InterruptA_Init(void)
{
	IntEnable(INT_GPIOA);								                          // Enable interrupt 
	IntPrioritySet(INT_GPIOA, 0x20);		                          // Set interrupt priority 0 
	GPIOIntEnable(GPIO_PORTA_BASE, GPIO_INT_PIN_3|GPIO_INT_PIN_5|GPIO_INT_PIN_7);		//arm interrupt on PC0,1,2 (Echo)
	GPIOIntTypeSet(GPIO_PORTA_BASE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_BOTH_EDGES);		// interrupt on both edges
}

void InterruptD_Init(void)
{
	IntEnable(INT_GPIOD);								                          // Enable interrupt 30 in NVIC, Code: NVIC_EN0_R |= 0x40000000;
	IntPrioritySet(INT_GPIOD, 0x00);		                          // Set interrupt priority 0 bits 23-21:010, Code: NVIC_PRI7_R &= ~0x00E00000
	GPIOIntEnable(GPIO_PORTD_BASE, GPIO_INT_PIN_1|GPIO_INT_PIN_3);								// arm interrupt on PB1 (Echo)
	GPIOIntTypeSet(GPIO_PORTD_BASE, GPIO_PIN_1|GPIO_PIN_3, GPIO_BOTH_EDGES);
}

void Timer0A_Handler(void)															 // Timer for sensor 1
{
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer0A
	IntRegister(INT_TIMER0A, Timer0A_Handler);
	TimerDisable(TIMER0_BASE, TIMER_A);
	GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_2, 0x00); 			 // Set Trigger pin low
	
	// Create 10us pulse
//	GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_PIN_3); // Set Trigger pin high
//	SysCtlDelay(27);				 															 // Make 10us delay, 27, (10e-6*SysCtlClockGet()-2)/3 + 1
//	GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0x00); 			 // Set Trigger pin low
}

void Timer1A_Handler(void)															 // Timer for sensor 2
{
	TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer1A
	IntRegister(INT_TIMER1A, Timer1A_Handler);
	TimerDisable(TIMER1_BASE, TIMER_A);
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_2, 0x00); 			 // Set Trigger pin low
}

void Timer2A_Handler(void)															 // Timer for sensor 3
{
	TimerIntClear(TIMER2_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer2A
	IntRegister(INT_TIMER2A, Timer2A_Handler);
	TimerDisable(TIMER2_BASE, TIMER_A);
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_4, 0x00); 			 // Set Trigger pin low
}

void Timer3A_Handler(void)															 // Timer for sensor 4
{
	TimerIntClear(TIMER3_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer3A
	IntRegister(INT_TIMER3A, Timer3A_Handler);
	TimerDisable(TIMER3_BASE, TIMER_A);
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, 0x00); 			 // Set Trigger pin low
}

void Timer4A_Handler(void)															 // Timer for sensor 5 (disabled)
{
	TimerIntClear(TIMER4_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer4A
	IntRegister(INT_TIMER4A, Timer4A_Handler);
	TimerDisable(TIMER4_BASE, TIMER_A);
	GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_0, 0x00); 			 // Set Trigger pin low
}

void GPIOPortD_Handler(void)			// C interrupt to count cars
{
	if(GPIO_PORTD_RIS_R&0x08)				// if PD3 has action
	{
		// Clear trigger flag echo pin
		GPIOIntClear(GPIO_PORTD_BASE, GPIO_INT_PIN_3);
	
		// count while there's pulse from echo pin rising
		if(GPIOPinRead(GPIO_PORTD_BASE, GPIO_PIN_3)== GPIO_PIN_3)
		{
			// Initialize Timer0B with value 0
        HWREG(TIMER0_BASE + TIMER_O_TBV) = 0;
        // Enable Timer0 to start measuring duration for which Echo Pin is High
        TimerEnable(TIMER0_BASE, TIMER_B);
		}
		// falling edge
		else
		{
			TimerDisable(TIMER0_BASE, TIMER_B);
			duration0 = TimerValueGet(TIMER0_BASE, TIMER_B);
			distance0 = duration0/464;//*17000/SysCtlClockGet(); 232 for 4Mhz
			
			// if car park not full and there's a car in front
			if(((cars_count<4)||(Disabled_count < 2))&&(distance0 < 4))
			{
				PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, 650);
				SysCtlDelay((2*SysCtlClockGet()-2)/3 + 1);
			}	
			else
			{
				PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, 375);
			}
			
			// Enable condition for Trigger Pulse
      trigok0 = 1;
		}
	}
	
	// Disabled spot case
	if(GPIO_PORTD_RIS_R&0x02)																	// if PD1 has action 
	{	
		GPIOIntClear(GPIO_PORTD_BASE, GPIO_INT_PIN_1);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin rising
		if(GPIOPinRead(GPIO_PORTD_BASE, GPIO_PIN_1)== GPIO_PIN_1)		// if PD1 high
		{
        HWREG(TIMER4_BASE + TIMER_O_TBV) = 0;								// Initialize Timer4B with value 0
        TimerEnable(TIMER4_BASE, TIMER_B);									// Enable Timer1 to start measuring duration for which Echo Pin is High
		}
		// falling edge
		else
		{
			TimerDisable(TIMER4_BASE, TIMER_B);										// disable timer
			duration4 = TimerValueGet(TIMER4_BASE, TIMER_B);			// get value of timer
			distance4 = duration4/464;														//*17000/SysCtlClockGet();convert to distance
			
			if(distance4 < 5)
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_PIN_3);		// turn green LED on 
			}
			else
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0);
			}
      trigok4 = 1;						// Enable condition for Trigger Pulse
		}
	}
}
// not used 
void GPIOPortF_Handler(void)
{
	// If red LED on (increment)
	if(GPIO_PORTF_RIS_R&0x02)
	{
		// clear trigger flag for PF1
		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_1);
		
		// increment at rising edge
		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1)==GPIO_PIN_1)
		{
			cars_count++;
//		char message[] = "1st Spot Empty\n\r";
//		for (int k = 0; k<sizeof(message); k++)
//		{
//			UARTCharPut(UART0_BASE, message[k]);
//		}
		}		
	//	prev_count = cars_count;
	}
	
	// if blue LED on (decrement)
	if(GPIO_PORTF_RIS_R&0x04)
	{
		// clear trigger flag for PF2
		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_2);
		
		// increment at rising edge
		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_2)==GPIO_PIN_2)
		{
			cars_count--;
//		char message[] = "2nd Spot Empty\n\r";
//		for (int k = 0; k<sizeof(message); k++)
//		{
//			UARTCharPut(UART0_BASE, message[k]);
//		}
		}
		//prev_count = cars_count;
	}
	
	if(GPIO_PORTF_RIS_R&0x08)
	{
		// clear trigger flag for PF3
		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_3);
		// increment at rising edge
		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_3)==GPIO_PIN_3)
		{
			Disabled_count++;
		}
		// decrement at falling edge
		else
		{
			Disabled_count--;
		}
		//prev_count = cars_count;
	}
	
//	if(GPIO_PORTF_RIS_R&0x10)
//	{
//		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_4);
//		// If SW1 is pressed
//		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)== 0)
//		{
//			PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, 625);
//			SysCtlDelay((2*SysCtlClockGet()-2)/3 + 1);
//		}
//		// falling edge
//		else
//		{
//			PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, 375);
//		}
//	}
}

// interrupt for counting cars leaving
void GPIOPortA_Handler(void)
{
	if(GPIO_PORTA_RIS_R&0x08)																	// if PA3 has action 
	{	
		GPIOIntClear(GPIO_PORTA_BASE, GPIO_INT_PIN_3);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin rising
		if(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_3)== GPIO_PIN_3)		// if PA3 high
		{
        HWREG(TIMER1_BASE + TIMER_O_TBV) = 0;								// Initialize Timer1B with value 0
        TimerEnable(TIMER1_BASE, TIMER_B);									// Enable Timer1 to start measuring duration for which Echo Pin is High
		}
		// falling edge
		else
		{
			duration1 = TimerValueGet(TIMER1_BASE, TIMER_B);						// get value of timer
			TimerDisable(TIMER1_BASE, TIMER_B);													// disable timer
			distance1 = duration1/464;//*17000/SysCtlClockGet();								// convert to distance
			
			if((object1!=1)&&(distance1 < 4))
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_PIN_1);		// turn on red LED
				SysCtlDelay((0.375*SysCtlClockGet()-2)/3 + 1);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0);
				
				object1 = 1;
			}
			if((object1)&&(distance1>6))
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);		// turn on blue LED
				SysCtlDelay((0.375*SysCtlClockGet()-2)/3 + 1);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0);
				object1 = 0;
			}
      trigok1 = 1;						// Enable condition for Trigger Pulse
		}
	}
	
	if(GPIO_PORTA_RIS_R&0x20)																	// if PA5 has action 
	{	
		GPIOIntClear(GPIO_PORTA_BASE, GPIO_INT_PIN_5);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin rising
		if(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_5)== GPIO_PIN_5)		// if PB3 high
		{
        HWREG(TIMER2_BASE + TIMER_O_TBV) = 0;								// Initialize Timer2B with value 0
        TimerEnable(TIMER2_BASE, TIMER_B);									// Enable Timer2 to start measuring duration for which Echo Pin is High
		}
		// falling edge
		else
		{
			duration2 = TimerValueGet(TIMER2_BASE, TIMER_B);
			TimerDisable(TIMER2_BASE, TIMER_B);
			distance2 = duration2/464;//*17000/SysCtlClockGet();
			
			if((object2!=1)&&(distance2 < 4))
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_PIN_1);		// turn on red LED
				SysCtlDelay((0.375*SysCtlClockGet()-2)/3 + 1);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0);
				object2 = 1;
			}
			if((object2)&&(distance2>6))
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);		// turn on blue LED
				SysCtlDelay((0.375*SysCtlClockGet()-2)/3 + 1);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0);
				object2 = 0;
			}
      trigok2 = 1;						// Enable condition for Trigger Pulse
		}
	}
	
	
	if(GPIO_PORTA_RIS_R&0x80)																	// if PA7 has action 
	{	
		GPIOIntClear(GPIO_PORTA_BASE, GPIO_INT_PIN_7);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin rising
		if(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_7)== GPIO_PIN_7)		// if PB7 high
		{
        HWREG(TIMER3_BASE + TIMER_O_TBV) = 0;								// Initialize Timer4B with value 0
        TimerEnable(TIMER3_BASE, TIMER_B);									// Enable Timer4 to start measuring duration for which Echo Pin is High
		}
		// falling edge
		else
		{
			duration3 = TimerValueGet(TIMER3_BASE, TIMER_B);
			TimerDisable(TIMER3_BASE, TIMER_B);
			distance3 = duration3/464;//*17000/SysCtlClockGet();
			
			if((object3!=1)&&(distance3 < 4))
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_PIN_1);		// turn on red LED
				SysCtlDelay((0.375*SysCtlClockGet()-2)/3 + 1);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0);
				
				object3 = 1;
			}
			
			// if object leaving
			if((object3)&&(distance3>6))						
			{
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);		// turn on blue LED
				SysCtlDelay((0.375*SysCtlClockGet()-2)/3 + 1);
				GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0);
				object3 = 0;
			}
      trigok3 = 1;						// Enable condition for Trigger Pulse
		}
	}
}

int main(void)
{
	// Set clock rate to 400M/2/25 = 8MHz. (or 40MHz, divide by 5)
	SysCtlClockSet(SYSCTL_SYSDIV_25|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	
	unsigned long reload = 480000;			// reload value to generate 60ms delay
	uint32_t period = 5000; 						//20ms (8MHz / 32pwm_divider / 50Hz)
	uint32_t duty = 375;     						//1.5ms pulse width (0 degrees), 0(1.5ms) mid, +90(~2.4ms) left, -90(0.5ms) right	
	
	// Initialize GPIOportF, PF2, PF3; GPIOportB (PB0,2,4,6 out, PB1,3,5,7 in); GPIOportC (PC4,5,6 output)
	PortFunctionInit();
	
	// Configure PB6,PB7 as PWM										
	ConfigurePWM(period, duty);
	
	// Run Timer interrupt
	Timers_Init();
	
	// Run PortB interrupt
	InterruptD_Init();	
	
	// Run PortF interrupt
	InterruptF_Init();
	
	// Run PortC interrupt
	InterruptA_Init();
	
	// Globally enable interrupt
	IntMasterEnable();
	
	GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, 0);
	
	char message0[] = "Welcome to Pi Parking Garage! All spots are empty!\n\r";
				for (int n = 0; n<sizeof(message0); n++)
				{
					UARTCharPut(UART0_BASE, message0[n]);
				}

	while(1)
  {
		if(trigok0)
		{
			// Load timer value 10us 
			TimerLoadSet(TIMER0_BASE, TIMER_A, (SysCtlClockGet()/100000) - 1);
			// Set trig pin high
			GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_2, GPIO_PIN_2);
			// Enable Timer0A to cause interrupt
			TimerEnable(TIMER0_BASE, TIMER_A);								
			// Disable trig flag
			trigok0 = 0;
		}
		
		if(trigok1)
		{
			// Load timer value 10us 
			TimerLoadSet(TIMER1_BASE, TIMER_A, (SysCtlClockGet()/100000) - 1);
			// Set trig pin high
			GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_2, GPIO_PIN_2);
			// Enable Timer0A to cause interrupt
			TimerEnable(TIMER1_BASE, TIMER_A);								
			// Disable trig flag
			trigok1 = 0;
		}
		
		if(trigok2)
		{
			// Load timer value 10us 
			TimerLoadSet(TIMER2_BASE, TIMER_A, (SysCtlClockGet()/100000) - 1);
			// Set trig pin high
			GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_4, GPIO_PIN_4);
			// Enable Timer2A to cause interrupt
			TimerEnable(TIMER2_BASE, TIMER_A);								
			// Disable trig flag
			trigok2 = 0;
		}
		
		if(trigok3)
		{
			// Load timer value 10us 
			TimerLoadSet(TIMER3_BASE, TIMER_A, (SysCtlClockGet()/100000) - 1);
			// Set trig pin high
			GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, GPIO_PIN_6);
			// Enable Timer3A to cause interrupt
			TimerEnable(TIMER3_BASE, TIMER_A);								
			// Disable trig flag
			trigok3 = 0;
		}
		
		if(trigok4)
		{
			// Load timer value 10us 
			TimerLoadSet(TIMER4_BASE, TIMER_A, (SysCtlClockGet()/100000) - 1);
			// Set trig pin high
			GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_0, GPIO_PIN_0);
			// Enable Timer4A to cause interrupt
			TimerEnable(TIMER4_BASE, TIMER_A);								
			// Disable trig flag
			trigok4 = 0;
		}
		
		// display full message when carpark is full. 
		if((cars_count==3)&&(Disabled_count==1))
		{
			char message4[] = "Carpark FULL!";
			for (int k = 0; k<sizeof(message4); k++)
			{
				UARTCharPut(UART0_BASE, message4[k]);
			}
		}
		
		else
		{
			char cars = cars_count + '0';
			char disabled = Disabled_count + '0';
			char message2[] = "Regular Spot: ";
			for (int k = 0; k<sizeof(message2); k++)
			{
				UARTCharPut(UART0_BASE, message2[k]);
			}
			
			UARTCharPut(UART0_BASE, cars);
			char message3[] = "/3 Disabled Spot: ";
			for (int k = 0; k<sizeof(message3); k++)
			{
				UARTCharPut(UART0_BASE, message3[k]);
			}

			UARTCharPut(UART0_BASE, disabled);
			
			char message1[] = "/1\n\r";
			for (int k = 0; k<sizeof(message1); k++)
			{
				UARTCharPut(UART0_BASE, message1[k]);				
			}
		}
//		while(prev_count != cars_count)
//		{
//			char cars = cars_count + '0';
//			char disabled = Disabled_count + '0';
//				char message2[] = "Regular Spot: ";
//				for (int k = 0; k<sizeof(message2); k++)
//				{
//					UARTCharPut(UART0_BASE, message2[k]);
//				}
//				
//				UARTCharPut(UART0_BASE, cars);
//				char message3[] = "/3 Disabled Spot: ";
//				for (int k = 0; k<sizeof(message3); k++)
//				{
//					UARTCharPut(UART0_BASE, message3[k]);
//				}

//				UARTCharPut(UART0_BASE, disabled);
//				
//				char message1[] = "/1\n\r";
//				for (int k = 0; k<sizeof(message1); k++)
//				{
//					UARTCharPut(UART0_BASE, message1[k]);
//				}
//			}
  }
}
