//***********************************************************
// Hardware PWM proof of concept using
// the Tiva C Launchpad
//
// 
//
//
// This drives servo motors 90 degrees to left on PWM PB6, PB7 when 
// ultrasonic sensor senses object around 4.5cm away.
//***********************************************************

#include <stdint.h>
#include <stdbool.h>
#include <stdio.h>		//
#include <string.h>
#include "inc/hw_gpio.h"
#include "inc/hw_types.h"
#include "inc/hw_memmap.h"
#include "inc/hw_timer.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/gpio.h"
#include "driverlib/pwm.h"
#include "driverlib/uart.h"
#include "driverlib/timer.h"					// manually added
#include "driverlib/interrupt.h" 			// manually added
#include "inc/tm4c123gh6pm.h"					// manually added
//***********************************************************
volatile uint32_t cars_count = 0;
volatile uint32_t Disabled_count = 0;
volatile uint32_t count;
volatile uint32_t count1;
volatile uint32_t count2;
volatile uint32_t count3;
volatile uint32_t count4;

void PortFunctionInit(void)
{
	// Enable clock for Port F peripheral
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);

	// Enable pin PF3 for GPIOOutput (green) Trig
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_2);

	// Enable pin PF2 for GPIOInput (blue) Echo
	GPIOPinTypeGPIOInput(GPIO_PORTF_BASE, GPIO_PIN_4);
	
	//Enable pull-up on PF4 
	//GPIO_PORTF_PUR_R |= 0x10; 
	
	// Enable clock for Port D peripheral
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOD);
	
	// Enable pin PD0,2 for GPIOOutput Trig
	GPIOPinTypeGPIOOutput(GPIO_PORTD_BASE, GPIO_PIN_0|GPIO_PIN_2);

	// Enable pin PD1,3 for GPIOInput  Echo
	GPIOPinTypeGPIOInput(GPIO_PORTD_BASE, GPIO_PIN_1|GPIO_PIN_3);
	
	// Set output 2mA current strength, push-pull pin *STD, and weak pull down *WPD.
	GPIOPadConfigSet(GPIO_PORTD_BASE, GPIO_PIN_1|GPIO_PIN_3, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
	
	// Enable peripheral clocks for UART0 
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
  SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	
	// Enable pin PA2,4,6 for Output (Trig)
	GPIOPinTypeGPIOOutput(GPIO_PORTA_BASE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_6);
	// Enable pin PA3,5,7 for Input	 (Echo)
	GPIOPinTypeGPIOInput(GPIO_PORTA_BASE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7);
	GPIOPadConfigSet(GPIO_PORTA_BASE, GPIO_PIN_3|GPIO_PIN_5|GPIO_PIN_7, GPIO_STRENGTH_2MA, GPIO_PIN_TYPE_STD_WPD);
	//
  // Enable pin PA0 & PA1 for UART0 U0RX
  //
  GPIOPinConfigure(GPIO_PA0_U0RX);
  GPIOPinConfigure(GPIO_PA1_U0TX);
  GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);
	
	// Configure UART 115200 baud rate, clk freq, 8 bit word leng, 1 stop bit, & no parity.
	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
        (UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE | UART_CONFIG_PAR_NONE));
	
	//UART1_IBRD_R = 27;     // IBRD = int(50,000,000/(16*115,200)) = int(27.12674)
	//UART1_FBRD_R = 8;     // FBRD = round(0.12674 * 64) = 8
	//UART1_LCRH_R = 0x00000060;  // 8 bit, no parity bits, one stop, no FIFOs
	
	// Disable FIFO (First In First Out) registers. 
	//UARTFIFODisable(UART0_BASE);
}

void
ConfigurePWM(uint32_t period, uint32_t duty)
{
    //Configure PWM Clock divide system clock by 32
    SysCtlPWMClockSet(SYSCTL_PWMDIV_32);

    // Enable E peripheral used by this program.
    SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);
    SysCtlPeripheralEnable(SYSCTL_PERIPH_PWM0);  //Tiva Launchpad has two modules (0 and 1). Module 0 covers the E peripheral
	
    //Configure PE4,PE5 Pins as PWM
    GPIOPinConfigure(GPIO_PE4_M0PWM4);
    GPIOPinConfigure(GPIO_PE5_M0PWM5);
    GPIOPinTypePWM(GPIO_PORTE_BASE, GPIO_PIN_4|GPIO_PIN_5);

    //Configure PWM Options
    //PWM_GEN_2 Covers M0PWM4 and M0PWM5 for PE4,5, with count down mode, no comparator update synchronization mode
    PWMGenConfigure(PWM0_BASE, PWM_GEN_2, PWM_GEN_MODE_DOWN|PWM_GEN_MODE_NO_SYNC); 

    //Set the Period (expressed in clock ticks)
    PWMGenPeriodSet(PWM0_BASE, PWM_GEN_2, period);

    //Set PWM duty for M0PWM4 and M0PWM5
    PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, duty);
    PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, duty);

    // Enable the PWM generator
    PWMGenEnable(PWM0_BASE, PWM_GEN_2);

		// Enable PWM Output pins 4 & 5: M0PWM4 and M0PWM5
    PWMOutputState(PWM0_BASE, PWM_OUT_4_BIT|PWM_OUT_5_BIT, true);		
}

void Timers_Init(unsigned long reload)		//unsigned long reload
{
	//Timer 0A interrupt, 0B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER0);			// enable peripheral clock for Timer0A
	TimerDisable(TIMER0_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER0_BASE, TIMER_CFG_PERIODIC);	// configure for periodic mode
	TimerLoadSet(TIMER0_BASE, TIMER_A, reload-1);			// reload value of 60ms
	IntPrioritySet(INT_TIMER0A, 0x20);								// Set priority as 1
	IntEnable(INT_TIMER0A);														// Enable interrupt 35 in NVIC
	TimerIntEnable(TIMER0_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	TimerEnable(TIMER0_BASE, TIMER_A);								// Enable Timer0A
	
	// Timer 1A interrupt,1B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER1);			// enable peripheral clock for Timer1A
	TimerDisable(TIMER1_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER1_BASE, TIMER_CFG_PERIODIC);	// configure for periodic mode
	TimerLoadSet(TIMER1_BASE, TIMER_A, reload-1);			// reload value of 60ms
	IntPrioritySet(INT_TIMER1A, 0x20);								// Set priority as 1
	IntEnable(INT_TIMER1A);														// Enable interrupt  
	TimerIntEnable(TIMER1_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	TimerEnable(TIMER1_BASE, TIMER_A);								// Enable Timer1A

	// Timer 2A interrupt,2B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER2);			// enable peripheral clock for Timer2A
	TimerDisable(TIMER2_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER2_BASE, TIMER_CFG_PERIODIC);	// configure for periodic mode
	TimerLoadSet(TIMER2_BASE, TIMER_A, reload-1);			// reload value of 60ms
	IntPrioritySet(INT_TIMER2A, 0x20);								// Set priority as 1
	IntEnable(INT_TIMER2A);														// Enable interrupt 
	TimerIntEnable(TIMER2_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	TimerEnable(TIMER2_BASE, TIMER_A);								// Enable Timer2A
	
	// Timer 3A interrupt,3B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER3);			// enable peripheral clock for Timer3A
	TimerDisable(TIMER3_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER3_BASE, TIMER_CFG_PERIODIC);	// configure for periodic mode
	TimerLoadSet(TIMER3_BASE, TIMER_A, reload-1);			// reload value of 60ms
	IntPrioritySet(INT_TIMER3A, 0x20);								// Set priority as 1
	IntEnable(INT_TIMER3A);														// Enable interrupt 
	TimerIntEnable(TIMER3_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	TimerEnable(TIMER3_BASE, TIMER_A);								// Enable Timer3A

	// Timer 4A interrupt,4B count
	SysCtlPeripheralEnable(SYSCTL_PERIPH_TIMER4);			// enable peripheral clock for Timer2A
	TimerDisable(TIMER4_BASE, TIMER_A);								// disable timer during setup
	TimerConfigure(TIMER4_BASE, TIMER_CFG_PERIODIC);	// configure for periodic mode
	TimerLoadSet(TIMER4_BASE, TIMER_A, reload-1);			// reload value of 60ms
	IntPrioritySet(INT_TIMER4A, 0x20);								// Set priority as 1
	IntEnable(INT_TIMER4A);														// Enable interrupt 35 in NVIC
	TimerIntEnable(TIMER4_BASE, TIMER_TIMA_TIMEOUT);	// arm interrupt at timeout
	TimerEnable(TIMER4_BASE, TIMER_A);								// Enable Timer4A
}

void InterruptF_Init(void)
{
	IntEnable(INT_GPIOF);								                          // Enable interrupt 30 in NVIC, Code: NVIC_EN0_R |= 0x40000000;
	IntPrioritySet(INT_GPIOF, 0x00);		                          // Set interrupt priority 0 bits 23-21:010, Code: NVIC_PRI7_R &= ~0x00E00000
	GPIOIntEnable(GPIO_PORTF_BASE, GPIO_INT_PIN_1|GPIO_INT_PIN_2|GPIO_PIN_3);		//GPIO_PORTF_IM_R |= 0x04; arm interrupt on PF2 (Echo)
	GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_BOTH_EDGES);
	//GPIOIntTypeSet(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_FALLING_EDGE);
	                                                              //GPIO_PORTF_IS_R &= ~0x04;	PF2 are edge sensitive
	                                                              //GPIO_PORTF_IBE_R &= ~0x04;  PF2 not both edge triggered, depends on IEV register
	                                                              //GPIO_PORTF_IEV_R |= 0x04;PF2 are rising-edged event
}

void InterruptA_Init(void)
{
	IntEnable(INT_GPIOA);								                          // Enable interrupt 
	//IntPriorityGroupingSet(NVIC_APINT_PRIGROUP_7_1);
	IntPrioritySet(INT_GPIOA, 0x00);		                          // Set interrupt priority 0 
	GPIOIntEnable(GPIO_PORTA_BASE, GPIO_INT_PIN_3|GPIO_INT_PIN_5|GPIO_INT_PIN_7);		//arm interrupt on PC0,1,2 (Echo)
	GPIOIntTypeSet(GPIO_PORTA_BASE, GPIO_INT_PIN_3|GPIO_INT_PIN_5|GPIO_INT_PIN_7, GPIO_RISING_EDGE);		// interrupt on both edges
}

void InterruptD_Init(void)
{
	IntEnable(INT_GPIOD);								                          // Enable interrupt 30 in NVIC, Code: NVIC_EN0_R |= 0x40000000;
	IntPrioritySet(INT_GPIOD, 0x00);		                          // Set interrupt priority 0 bits 23-21:010, Code: NVIC_PRI7_R &= ~0x00E00000
	GPIOIntEnable(GPIO_PORTD_BASE, GPIO_INT_PIN_1|GPIO_INT_PIN_3);								// arm interrupt on PB1 (Echo)
	GPIOIntTypeSet(GPIO_PORTD_BASE, GPIO_PIN_1|GPIO_PIN_3, GPIO_RISING_EDGE);
}

void Timer0A_Handler(void)															 // Timer for sensor 1
{
	TimerIntClear(TIMER0_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer0A
	IntRegister(INT_TIMER0A, Timer0A_Handler);
	
	// Create 10us pulse
	GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_2, GPIO_PIN_2); // Set Trigger pin high
	SysCtlDelay(((SysCtlClockGet()/100000)-2)/3 + 1);			 // Make 10us delay, 27, (10e-6*SysCtlClockGet()-2)/3 + 1
	GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_2, 0x00); 			 // Set Trigger pin low
}

void Timer1A_Handler(void)															 // Timer for sensor 2
{
	TimerIntClear(TIMER1_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer1A
	IntRegister(INT_TIMER1A, Timer1A_Handler);
	// Create 10us pulse
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_2, GPIO_PIN_2); // Set Trigger pin high
	SysCtlDelay(((SysCtlClockGet()/100000)-2)/3 + 1);			 // Make 10us delay, 27, (10e-6*SysCtlClockGet()-2)/3 + 1
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_2, 0x00); 			 // Set Trigger pin low
}

void Timer2A_Handler(void)															 // Timer for sensor 3
{
	TimerIntClear(TIMER2_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer2A
	IntRegister(INT_TIMER2A, Timer2A_Handler);
	// Create 10us pulse
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_4, GPIO_PIN_4); // Set Trigger pin high
	SysCtlDelay(((SysCtlClockGet()/100000)-2)/3 + 1);			 // Make 10us delay, 27, (10e-6*SysCtlClockGet()-2)/3 + 1
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_4, 0x00); 			 // Set Trigger pin low
}

void Timer3A_Handler(void)															 // Timer for sensor 4
{
	TimerIntClear(TIMER3_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer3A
	IntRegister(INT_TIMER3A, Timer3A_Handler);
	// Create 10us pulse
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, GPIO_PIN_6); // Set Trigger pin high
	SysCtlDelay(((SysCtlClockGet()/100000)-2)/3 + 1);			 // Make 10us delay, 27, (10e-6*SysCtlClockGet()-2)/3 + 1
	GPIOPinWrite(GPIO_PORTA_BASE, GPIO_PIN_6, 0x00); 			 // Set Trigger pin low
}

void Timer4A_Handler(void)															 // Timer for sensor 5 (disabled)
{
	TimerIntClear(TIMER4_BASE, TIMER_TIMA_TIMEOUT);				 // Clear trigger flag for Timer4A
	IntRegister(INT_TIMER4A, Timer4A_Handler);
	// Create 10us pulse
	GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_0, GPIO_PIN_0); // Set Trigger pin high
	SysCtlDelay(((SysCtlClockGet()/100000)-2)/3 + 1);			 // Make 10us delay, 27, (10e-6*SysCtlClockGet()-2)/3 + 1
	GPIOPinWrite(GPIO_PORTD_BASE, GPIO_PIN_0, 0x00); 			 // Set Trigger pin low
}

void GPIOPortD_Handler(void)			// C interrupt to count cars
{
	if(GPIO_PORTD_RIS_R&0x08)				// if PD3 has action
	{
		// Clear trigger flag echo pin
		GPIOIntClear(GPIO_PORTD_BASE, GPIO_INT_PIN_3);
	
		// count while there's pulse from echo pin
		while(GPIOPinRead(GPIO_PORTD_BASE, GPIO_PIN_3)== GPIO_PIN_3)
		{
			count++;
		}
		
		// if less than around 4.5cm, turn servo by 90 degrees, 100 == 4.5cm
		if((count>0)&&(count < 100))
		{ 
			//Drive servo to 90 left (2.5ms, or 625)	
			PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, 625);
			
			// 2s delay, 5333334
			SysCtlDelay((2*SysCtlClockGet()-2)/3 + 1);
		}
    
		else
		{
			PWMPulseWidthSet(PWM0_BASE, PWM_OUT_4, 375);
		}
		count = 0;
	}
	
	if(GPIO_PORTD_RIS_R&0x02)																	// if PD1 has action 
	{	
		GPIOIntClear(GPIO_PORTD_BASE, GPIO_INT_PIN_1);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin
		while(GPIOPinRead(GPIO_PORTD_BASE, GPIO_PIN_1)== GPIO_PIN_1)
		{
			count4++;
		}
		
		// if less than around 4.5cm, turn servo by 90 degrees, 100 == 4.5cm
		if((count4>0)&&(count4 < 100))
		{ 
			// Turn on green light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, GPIO_PIN_3);
		}
    
		else
		{
			// Turn off green light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_3, 0);
		}
		count4 = 0;
	}
}
// not used 
void GPIOPortF_Handler(void)
{
//	// If red LED on
//	if(GPIO_PORTF_RIS_R&0x02)
//	{
//		// clear trigger flag for PF1
//		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_1);
//		
//		// increment at rising edge
//		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1)==GPIO_PIN_1)
//		{
//			cars_count++;
//		}
//		// decrement at falling edge
//		else
//		{
//			cars_count--;
//			
////			char message[] = "1st Spot Empty\n\r";
////				for (int k = 0; k<sizeof(message); k++)
////				{
////					UARTCharPut(UART0_BASE, message[k]);
////				}
//		}
//		prev_count = cars_count;
//	}
//	
//	// if blue LED on
//	if(GPIO_PORTF_RIS_R&0x04)
//	{
//		// clear trigger flag for PF1
//		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_2);
//		
//		// increment at rising edge
//		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_2)==GPIO_PIN_2)
//		{
//			cars_count++;
//		}
//		// decrement at falling edge
//		else
//		{
//			cars_count--;
////			char message[] = "2nd Spot Empty\n\r";
////				for (int k = 0; k<sizeof(message); k++)
////				{
////					UARTCharPut(UART0_BASE, message[k]);
////				}
//		}
//		prev_count = cars_count;
//	}
	
	if(GPIO_PORTF_RIS_R&0x0E)
	{
		// clear trigger flag for PF3
		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_1|GPIO_INT_PIN_2|GPIO_INT_PIN_3);
		// increment at rising edge
		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3)==0)
		{
			Disabled_count++;
			cars_count--;

			
		}
		// decrement at falling edge
		else
		{
			Disabled_count--;
		}
	}
	
//	if(GPIO_PORTF_RIS_R&0x10)
//	{
//		GPIOIntClear(GPIO_PORTF_BASE, GPIO_INT_PIN_4);
//		// If SW1 is pressed
//		if(GPIOPinRead(GPIO_PORTF_BASE, GPIO_PIN_4)== 0)
//		{
//			PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, 625);
//			SysCtlDelay((2*SysCtlClockGet()-2)/3 + 1);
//		}
//		// falling edge
//		else
//		{
//			PWMPulseWidthSet(PWM0_BASE, PWM_OUT_5, 375);
//		}
//	}
}

// interrupt for counting cars leaving
void GPIOPortA_Handler(void)
{
	if(GPIO_PORTA_RIS_R&0x08)																	// if PA3 has action 
	{	
		GPIOIntClear(GPIO_PORTA_BASE, GPIO_INT_PIN_3);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin
		while(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_3)== GPIO_PIN_3)
		{
			count1++;
		}
		
		// if less than around 4.5cm, turn servo by 90 degrees, 100 == 4.5cm
		if((count1>0)&&(count1 < 100))
		{ 
			// Turn on red light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_PIN_1);
		}
    
		else
		{
			// Turn off red light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0);
		}
		count1 = 0;
	}
	
	if(GPIO_PORTA_RIS_R&0x20)																	// if PA5 has action 
	{	
		GPIOIntClear(GPIO_PORTA_BASE, GPIO_INT_PIN_5);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin
		while(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_5)== GPIO_PIN_5)
		{
			count2++;
		}
		
		// if less than around 4.5cm, turn servo by 90 degrees, 100 == 4.5cm
		if((count2>0)&&(count2 < 100))
		{ 
			// Turn on red light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, GPIO_PIN_1);
		}
    
		else
		{
			// Turn off red light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0);
		}
		count2 = 0;
	}
	
	
	if(GPIO_PORTA_RIS_R&0x80)																	// if PA7 has action 
	{	
		GPIOIntClear(GPIO_PORTA_BASE, GPIO_INT_PIN_7);					// Clear trigger flag echo pin
	
		// count while there's pulse from echo pin
		while(GPIOPinRead(GPIO_PORTA_BASE, GPIO_PIN_7)== GPIO_PIN_7)
		{
			count3++;
		}
		
		// if less than around 4.5cm, turn servo by 90 degrees, 100 == 4.5cm
		if((count3>0)&&(count3 < 100))
		{ 
			// Turn on blue light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
		}
    
		else
		{
			// Turn off blue light
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, 0);
		}
		count3 = 0;
	}
}

int main(void)
{
	// Set clock rate to 400M/2/25 = 8MHz. (or 40MHz, divide by 5)
	SysCtlClockSet(SYSCTL_SYSDIV_2_5|SYSCTL_USE_PLL|SYSCTL_XTAL_16MHZ|SYSCTL_OSC_MAIN);
	
	unsigned long reload = 4800000;			// reload value to generate 60ms delay
	uint32_t period = 5000; 						//20ms (8MHz / 32pwm_divider / 50Hz)
	uint32_t duty = 375;     						//1.5ms pulse width (0 degrees), 0(1.5ms) mid, +90(~2.4ms) left, -90(0.5ms) right	
	
	// Initialize GPIOportF, PF2, PF3; GPIOportB (PB0,2,4,6 out, PB1,3,5,7 in); GPIOportC (PC4,5,6 output)
	PortFunctionInit();
	
	// Configure PB6,PB7 as PWM										
	ConfigurePWM(period, duty);
	
	// Run Timer interrupt
	Timers_Init(reload);
	
	// Run PortB interrupt
	InterruptD_Init();	
	
	// Run PortC interrupt
	InterruptA_Init();
	
	// Run PortF interrupt
	//InterruptF_Init();
		
	// Globally enable interrupt
	IntMasterEnable();
	
	char message0[] = "Welcome to Pi Parking Garage! All spots are empty!\n\r";
				for (int n = 0; n<sizeof(message0); n++)
				{
					UARTCharPut(UART0_BASE, message0[n]);
				}

	while(1)
  {
//		while(prev_count != cars_count)
//		{
//			char cars = cars_count + '0';
//			char disabled = Disabled_count + '0';
//				char message2[] = "Regular Spot: ";
//				for (int k = 0; k<sizeof(message2); k++)
//				{
//					UARTCharPut(UART0_BASE, message2[k]);
//				}
//				
//				UARTCharPut(UART0_BASE, cars);
//				char message3[] = "/3 Disabled Spot: ";
//				for (int k = 0; k<sizeof(message3); k++)
//				{
//					UARTCharPut(UART0_BASE, message3[k]);
//				}

//				UARTCharPut(UART0_BASE, disabled);
//				
//				char message1[] = "/1\n\r";
//				for (int k = 0; k<sizeof(message1); k++)
//				{
//					UARTCharPut(UART0_BASE, message1[k]);
//				}
//			}
  }
}
